30/08

Global status
	- micro-bosh creation (with an externally launched cpi-core process)
	- compilation vms ok, blobstore ok
	- bosh-master creation from micro-bosh
	- concourse creation from bosh-master
	
Issues
	- local storage issues (persistent disks happen to not be on the same host as vm when reconfiguring a deployment)
	- ip conflicts when recreating vm, due to cloudstack expunge delay (orig vm is destroyed but ip not yet releases)
	- disk / mount issues (probably related to vm expunge delay)
	- stemcell agent.json user data url is hardcoded. must find a way to find the correct cloudstack userdata url on the fly
	- stemcell : cant get keys from cloudstack metadata (requires stemcell code change to match cloudstack)
	- no support for vip / floating ip yet	


TODO

- run Director BATS against the cpi
	https://github.com/cloudfoundry/bosh/blob/master/docs/running_tests.md

- expunge vm
	required with static ip vms (ip not freed until vm is expunged)
	default value expunge.delay = 300 (5 mins)
	option 1
		reduce to 30s as cloudstack admin => need to restart management server 
		wait 30s in CPI after vm delete
	option2
		expunge with cloudstack API. option not avail in jclouds 1.9, use escaping mechanism to add the expunge flag?
- check template publication
	from cpi-core webdav, only public template possible ?
	validate publication state (instant OK for registering, need to wait for the ssvm (secondary storage vm) to copy the template
	connectivity issue when cloudstack tries asynchronously to copy template : vlan opened, dedicated chunk encoding compatible spring boot endpoint
	(workaround: mock template mode in cpi. copies an existing template and use it as a stemcell image)
	
	add a garbarge collection mechanism to the webdav server (remove old templates when consumed by cloudstack)	

- use isolated / dedicated networks for bosh vms
	http://www.shapeblue.com/using-the-api-for-advanced-network-management/
	static API assigned through API deployVirtualMachine	

- persist bosh registry.
	now hsqldb
	set persistent file in /var/vcap/store/cpi
	TBC : use bosh postgres db (add postgres jdbc driver + dialect config + bosh *db credentials injection)


- globals
	harden Exception mangement
	map spring boot /error to an intelligible CPI rest payload / stdout
	update json reference files for unit tests

	

- provision ssh keys
	generate keypair with cloudstack API (no support on portail)
	use keypair name + private key in bosh.yml
	see http://cloudstack-administration.readthedocs.org/en/latest/virtual_machines.html?highlight=ssh%20keypair
	see http://chriskleban-internet.blogspot.fr/2012/03/build-cloud-cloudstack-instance.html


25/08




- Design stemcell generation and bootstrap strategy
	userData json format ?
	requirement for a registry ? (current registry has only openstack and aws plugins)
		=> fixed by exposing a registry api from cpi-core + hsql db 
	ssh tunnel requirement ?
		=> registry access is OK from bosh-agent. Maybe needed on AWS or for security reason ?
	see cloudstack aws compatibility wrt metadata
		http://mail-archives.apache.org/mod_mbox/cloudstack-dev/201508.mbox/%3CD1E842D5.6319F%25chiradeep.vittal@citrix.com%3E
	
	NB: registry and ssh tunnels should be removed in few months by bosh team
	https://github.com/cloudfoundry/bosh/blob/master/bosh_openstack_cpi/lib/cloud/openstack/cloud.rb#L684-L697


	stemcell_builder
	https://libraries.io/rubygems/stemcell_builder
	
	conversion qcow2 => vhd
	http://blogs.citrix.com/2012/10/04/convert-a-raw-image-to-xenserver-vhd/
	
- ephemeral disk
	need custom size (created a dedicated offering)
	unable to attach custom disk size => placement constraints due to local storage in ou cloudstack ?
	cpi-core checks offering, ignores specified size if fixed size disk offering (for persistent disk or ephemeral disk)

- attach disk
	check if its possible on the fly, or if a vm reboot is required
	director lifecycle should manage this aspect according to bosh team ?
	must update registry to push setting.json with correct persistent / disk_id / path to bosh agent

- detach disk
	must update registry to push setting.json with correct persistent / disk_id / path to bosh agent

- bosh-init compatibility
	must currently launch manually cpi-core before using bosh init
	can we launch the cpi-core on the fly around each cpi call when used from bosh-init? (overhead is 5 s)
	

- prioritize current limitations
	only advanced zone
	no security group management
	no multi-nic vms
	leverage cloudstack affinity features
	xen only (cloudstack kvm ? cloudstack vsphere ?)
	only one OStype : Other PV (64-bit)
	persistent disk only with disk_pool (persistent_attribute not supported), a disk offering is required for persistent disk, and we need disk_pool to define it
		https://bosh.io/docs/persistent-disks.html#persistent-disk
		https://bosh.io/docs/persistent-disks.html#persistent-disk-pool



==========================
01/07
External CPI CC contract:
- validate CPI contract
    - w.r.t. cloud properties injection:
        - in cpi bosh release config prop
        - in context: director uuid
        - env vars: nothing
    - better understand exception serialization
        https://github.com/cloudfoundry/bosh/blob/master/bosh_cpi/lib/cloud/external_cpi.rb#L15-L26
    - better understand cpi start/stop and expected state management
        - current_vm_id() is rather for introspection (and locally mount a volume for stemcell creation)
        - each verbs leads to a CPI exec invocation, which exits among completion
         => as an optimization imagine something to keep the JVM running across invocations
    - understand which verbs are optional: ping (nats vs stdin) ?
        https://github.com/cloudfoundry/bosh/blob/master/bosh_cpi/lib/bosh/cpi/cli.rb
        [httpClient] 2015/06/19 16:10:02 DEBUG - Sending POST request with body {"method":"ping","arguments":[],"reply_to":"a09a1d1b-3910-45f3-5312-69eb4ee8ccde"}, endpoint https://mbus:mbus-password@10.106.236.106:6868/agent
    - better understand the configure_network verb
        - is an optional verb, used as an optimization
            https://github.com/cloudfoundry/bosh/blob/ede389a2e112e1b4f2dbc4495c08977da4439483/bosh-director/spec/unit/instance_updater/network_updater_spec.rb#L85-L86
        - capture internal CPI traces ?
        - study source code
            

- map stdin/stdout to CPI request / CPI response classes
    Is spring integration overkill ?
        How to test CLIIntegrationConfiguration ?
        Pointer to manual / samples ? (spring DSL and spring boot)
        How to trigger invocation of handlers as part of the flow ?
    Impl simple stdin and stdout ?
        
- map CPI request to calls to generic CPI interface: CPI#create_vm() ...
    Add Java checked exception corresponding to known RPC exception:
              Bosh::Clouds::CpiError
              Bosh::Clouds::NotSupported
              Bosh::Clouds::NotImplemented
              Bosh::Clouds::CloudError
              Bosh::Clouds::VMNotFound
              Bosh::Clouds::NoDiskSpace
              Bosh::Clouds::DiskNotAttached
              Bosh::Clouds::DiskNotFound
              Bosh::Clouds::VMCreationFailed
   

Get familiar with CloudStack API and features, and our local cloudstack specificities:
- meta-data service (necessary to inject specs to bosh agents: IP address, DNS config ...)
- template generation
- floating ips
- security groups
- multi-tenant features: domains, projects

Prereqs:
- DFY LDAP for docs (stemcell generation) and network access
- DFY cloud stack preprod access (API + instances)
- DFY collab to understand/reuse current automation (scripts for image boot)

Design supported cloud-specific manifest format & features:
- choose resource pool units to expose in manifest: catalog offering (m1.small) or exact values (100MB) ? Does JClouds support both ?

CloudStack CPI impl:
- load CPI Impl cloud config and validate it: spring boot properties
    https://github.com/Orange-OpenSource/bosh-cloudstack-cpi-release/blob/master/jobs/cpi/templates/application.yml.erb
- validate generic CPI interface arguments against CPI specific contract: cloudstack through typed objects
- iterate through CPI arguments and pass in arguments to

